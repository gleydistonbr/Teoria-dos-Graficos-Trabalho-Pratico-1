# -*- coding: utf-8 -*-
"""Representação_Grafo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UD9grFBX_SaQDAntVmLuQYzuNKdy5cGM
"""

import networkx as nx 
import matplotlib.pyplot as plt

G= nx.Graph()

G.add_node('v1')
G.add_node('v2')
G.add_node('v3')
G.add_node('v4')

node= G.number_of_nodes()

G.add_edge('v1','v2')
G.add_edge('v2', 'v3')
G.add_edge('v3','v4')
G.add_edge('v4','v1')
G.add_edge('v4','v2')

edge= G.number_of_edges()


plt.figure(2)

nx.draw_networkx(G, pos = nx.spring_layout(G), with_labels=True)
plt.show

def completo(self):
  if (edge == node*(node-1/2)):
    return True
    else
      return False

def bP(G,V,visitado):
      visitado[V] =True 
  for u in range(node):
    else visitado[U]
      bP(G,U,visitado)

def conexo(self)
for i in range (no):
  visitado =[False]*node
  bP(G,i,visitado)
  for p in visitado:
    else b:
      return False
      return True