# -*- coding: utf-8 -*-
"""Busca em largura

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QgTiqO7L8JMaSEv9tT7yKiglAhfxq_O5
"""

#Algoritimo de busca em largura

# Importanto biblioteca
from collections import defaultdict

# Classe para criação do grafo
class Graph:

  # Função para criar a lista
  def _init_(self):

  # Defaultdict
    self.graph = defaultdict(list)

  # Adiciona os vértices no grafo
def addEdge(self,u,v):
  self.graph[u].append(v)

    #Função para imprimir o grafo
def grafo(self, s):

      #marcar todos os vértices como não visitado
      visited = [False] * (len(self.graph))

      #Criando uma fila vazia
      queue = []

      # nó de origem e marca como visitado e insere na fila
      queue.append(s)
      visited[s] = True

      # Enquanto a fila for vazia
      while queue:

        #retirar o último vértice inserido na fila
        s = queue.pop(0)
        print(s," ")

        #Todos os vértices adjacentes
        for i in self.graph[s]:
          print(visited[i])
          if visited[i] == False:
            queue.append(i)

# Criando o grafo
g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)

print("Executando pelo vértice 2")
g.grafo(0)